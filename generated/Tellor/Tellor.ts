// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewChallenge extends ethereum.Event {
  get params(): NewChallenge__Params {
    return new NewChallenge__Params(this);
  }
}

export class NewChallenge__Params {
  _event: NewChallenge;

  constructor(event: NewChallenge) {
    this._event = event;
  }

  get _currentChallenge(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _currentRequestId(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get _difficulty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _totalTips(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewDispute extends ethereum.Event {
  get params(): NewDispute__Params {
    return new NewDispute__Params(this);
  }
}

export class NewDispute__Params {
  _event: NewDispute;

  constructor(event: NewDispute) {
    this._event = event;
  }

  get _disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _miner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NewValue extends ethereum.Event {
  get params(): NewValue__Params {
    return new NewValue__Params(this);
  }
}

export class NewValue__Params {
  _event: NewValue;

  constructor(event: NewValue) {
    this._event = event;
  }

  get _requestId(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get _time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _value(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get _totalTips(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _currentChallenge(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class NonceSubmitted extends ethereum.Event {
  get params(): NonceSubmitted__Params {
    return new NonceSubmitted__Params(this);
  }
}

export class NonceSubmitted__Params {
  _event: NonceSubmitted;

  constructor(event: NonceSubmitted) {
    this._event = event;
  }

  get _miner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _nonce(): string {
    return this._event.parameters[1].value.toString();
  }

  get _requestId(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get _value(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get _currentChallenge(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _slot(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TipAdded extends ethereum.Event {
  get params(): TipAdded__Params {
    return new TipAdded__Params(this);
  }
}

export class TipAdded__Params {
  _event: TipAdded;

  constructor(event: TipAdded) {
    this._event = event;
  }

  get _sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tip(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _totalTips(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get _disputeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _position(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get _voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _voteWeight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Tellor__balancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Tellor__currentMinersResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Tellor__disputesByIdResult {
  value0: Bytes;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: boolean;
  value5: Address;
  value6: Address;
  value7: Address;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: boolean,
    value5: Address,
    value6: Address,
    value7: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    return map;
  }
}

export class Tellor extends ethereum.SmartContract {
  static bind(address: Address): Tellor {
    return new Tellor("Tellor", address);
  }

  _allowances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "_allowances",
      "_allowances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try__allowances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_allowances",
      "_allowances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addresses(param0: Bytes): Address {
    let result = super.call("addresses", "addresses(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_addresses(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("addresses", "addresses(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(_user: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _user: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedToTrade(_user: Address, _amount: BigInt): boolean {
    let result = super.call(
      "allowedToTrade",
      "allowedToTrade(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_allowedToTrade(
    _user: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedToTrade",
      "allowedToTrade(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(_spender: Address, _amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    _spender: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfAt(_user: Address, _blockNumber: BigInt): BigInt {
    let result = super.call(
      "balanceOfAt",
      "balanceOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfAt(
    _user: Address,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfAt",
      "balanceOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address, param1: BigInt): Tellor__balancesResult {
    let result = super.call(
      "balances",
      "balances(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Tellor__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_balances(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Tellor__balancesResult> {
    let result = super.tryCall(
      "balances",
      "balances(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Tellor__balancesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  bytesVars(param0: Bytes): Bytes {
    let result = super.call("bytesVars", "bytesVars(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBytes();
  }

  try_bytesVars(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("bytesVars", "bytesVars(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  currentMiners(param0: BigInt): Tellor__currentMinersResult {
    let result = super.call(
      "currentMiners",
      "currentMiners(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Tellor__currentMinersResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_currentMiners(
    param0: BigInt
  ): ethereum.CallResult<Tellor__currentMinersResult> {
    let result = super.tryCall(
      "currentMiners",
      "currentMiners(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Tellor__currentMinersResult(value[0].toBigInt(), value[1].toAddress())
    );
  }

  disputeIdByDisputeHash(param0: Bytes): BigInt {
    let result = super.call(
      "disputeIdByDisputeHash",
      "disputeIdByDisputeHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_disputeIdByDisputeHash(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "disputeIdByDisputeHash",
      "disputeIdByDisputeHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disputesById(param0: BigInt): Tellor__disputesByIdResult {
    let result = super.call(
      "disputesById",
      "disputesById(uint256):(bytes32,int256,bool,bool,bool,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Tellor__disputesByIdResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toAddress()
    );
  }

  try_disputesById(
    param0: BigInt
  ): ethereum.CallResult<Tellor__disputesByIdResult> {
    let result = super.tryCall(
      "disputesById",
      "disputesById(uint256):(bytes32,int256,bool,bool,bool,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Tellor__disputesByIdResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toAddress()
      )
    );
  }

  migrated(param0: Address): boolean {
    let result = super.call("migrated", "migrated(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_migrated(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("migrated", "migrated(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minersByChallenge(param0: Bytes, param1: Address): boolean {
    let result = super.call(
      "minersByChallenge",
      "minersByChallenge(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_minersByChallenge(
    param0: Bytes,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "minersByChallenge",
      "minersByChallenge(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newValueTimestamps(param0: BigInt): BigInt {
    let result = super.call(
      "newValueTimestamps",
      "newValueTimestamps(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_newValueTimestamps(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newValueTimestamps",
      "newValueTimestamps(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestIdByQueryHash(param0: Bytes): BigInt {
    let result = super.call(
      "requestIdByQueryHash",
      "requestIdByQueryHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_requestIdByQueryHash(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestIdByQueryHash",
      "requestIdByQueryHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uints(param0: Bytes): BigInt {
    let result = super.call("uints", "uints(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_uints(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("uints", "uints(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verify(): BigInt {
    let result = super.call("verify", "verify():(uint256)", []);

    return result[0].toBigInt();
  }

  try_verify(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("verify", "verify():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ext(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddTipCall extends ethereum.Call {
  get inputs(): AddTipCall__Inputs {
    return new AddTipCall__Inputs(this);
  }

  get outputs(): AddTipCall__Outputs {
    return new AddTipCall__Outputs(this);
  }
}

export class AddTipCall__Inputs {
  _call: AddTipCall;

  constructor(call: AddTipCall) {
    this._call = call;
  }

  get _requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tip(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddTipCall__Outputs {
  _call: AddTipCall;

  constructor(call: AddTipCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BeginDisputeCall extends ethereum.Call {
  get inputs(): BeginDisputeCall__Inputs {
    return new BeginDisputeCall__Inputs(this);
  }

  get outputs(): BeginDisputeCall__Outputs {
    return new BeginDisputeCall__Outputs(this);
  }
}

export class BeginDisputeCall__Inputs {
  _call: BeginDisputeCall;

  constructor(call: BeginDisputeCall) {
    this._call = call;
  }

  get _requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minerIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BeginDisputeCall__Outputs {
  _call: BeginDisputeCall;

  constructor(call: BeginDisputeCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateForCall extends ethereum.Call {
  get inputs(): MigrateForCall__Inputs {
    return new MigrateForCall__Inputs(this);
  }

  get outputs(): MigrateForCall__Outputs {
    return new MigrateForCall__Outputs(this);
  }
}

export class MigrateForCall__Inputs {
  _call: MigrateForCall;

  constructor(call: MigrateForCall) {
    this._call = call;
  }

  get _destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bypass(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class MigrateForCall__Outputs {
  _call: MigrateForCall;

  constructor(call: MigrateForCall) {
    this._call = call;
  }
}

export class ProposeForkCall extends ethereum.Call {
  get inputs(): ProposeForkCall__Inputs {
    return new ProposeForkCall__Inputs(this);
  }

  get outputs(): ProposeForkCall__Outputs {
    return new ProposeForkCall__Outputs(this);
  }
}

export class ProposeForkCall__Inputs {
  _call: ProposeForkCall;

  constructor(call: ProposeForkCall) {
    this._call = call;
  }

  get _propNewTellorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeForkCall__Outputs {
  _call: ProposeForkCall;

  constructor(call: ProposeForkCall) {
    this._call = call;
  }
}

export class SubmitMiningSolutionCall extends ethereum.Call {
  get inputs(): SubmitMiningSolutionCall__Inputs {
    return new SubmitMiningSolutionCall__Inputs(this);
  }

  get outputs(): SubmitMiningSolutionCall__Outputs {
    return new SubmitMiningSolutionCall__Outputs(this);
  }
}

export class SubmitMiningSolutionCall__Inputs {
  _call: SubmitMiningSolutionCall;

  constructor(call: SubmitMiningSolutionCall) {
    this._call = call;
  }

  get _nonce(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _requestIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SubmitMiningSolutionCall__Outputs {
  _call: SubmitMiningSolutionCall;

  constructor(call: SubmitMiningSolutionCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlockDisputeFeeCall extends ethereum.Call {
  get inputs(): UnlockDisputeFeeCall__Inputs {
    return new UnlockDisputeFeeCall__Inputs(this);
  }

  get outputs(): UnlockDisputeFeeCall__Outputs {
    return new UnlockDisputeFeeCall__Outputs(this);
  }
}

export class UnlockDisputeFeeCall__Inputs {
  _call: UnlockDisputeFeeCall;

  constructor(call: UnlockDisputeFeeCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockDisputeFeeCall__Outputs {
  _call: UnlockDisputeFeeCall;

  constructor(call: UnlockDisputeFeeCall) {
    this._call = call;
  }
}

export class VerifyCall extends ethereum.Call {
  get inputs(): VerifyCall__Inputs {
    return new VerifyCall__Inputs(this);
  }

  get outputs(): VerifyCall__Outputs {
    return new VerifyCall__Outputs(this);
  }
}

export class VerifyCall__Inputs {
  _call: VerifyCall;

  constructor(call: VerifyCall) {
    this._call = call;
  }
}

export class VerifyCall__Outputs {
  _call: VerifyCall;

  constructor(call: VerifyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _supportsDispute(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}
